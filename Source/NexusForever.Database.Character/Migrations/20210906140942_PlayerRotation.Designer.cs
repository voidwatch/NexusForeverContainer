// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NexusForever.Database.Character;

namespace NexusForever.Database.Character.Migrations
{
    [DbContext(typeof(CharacterContext))]
    [Migration("20210906140942_PlayerRotation")]
    partial class PlayerRotation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("NexusForever.Database.Character.Model.CharacterAchievementModel", b =>
                {
                    b.Property<ulong>("Id")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValue(0ul)
                        .HasColumnName("id");

                    b.Property<ushort>("AchievementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(5) unsigned")
                        .HasDefaultValue((ushort)0)
                        .HasColumnName("achievementId");

                    b.Property<uint>("Data0")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("data0");

                    b.Property<uint>("Data1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("data1");

                    b.Property<DateTime?>("DateCompleted")
                        .HasColumnType("datetime")
                        .HasColumnName("dateCompleted");

                    b.HasKey("Id", "AchievementId")
                        .HasName("PRIMARY");

                    b.ToTable("character_achievement");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.CharacterActionSetAmpModel", b =>
                {
                    b.Property<ulong>("Id")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValue(0ul)
                        .HasColumnName("id");

                    b.Property<byte>("SpecIndex")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("specIndex");

                    b.Property<ushort>("AmpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(5) unsigned")
                        .HasDefaultValue((ushort)0)
                        .HasColumnName("ampId");

                    b.HasKey("Id", "SpecIndex", "AmpId")
                        .HasName("PRIMARY");

                    b.ToTable("character_action_set_amp");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.CharacterActionSetShortcutModel", b =>
                {
                    b.Property<ulong>("Id")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValue(0ul)
                        .HasColumnName("id");

                    b.Property<byte>("SpecIndex")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("specIndex");

                    b.Property<ushort>("Location")
                        .HasColumnType("smallint(5) unsigned")
                        .HasDefaultValue((ushort)0)
                        .HasColumnName("location");

                    b.Property<uint>("ObjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("objectId");

                    b.Property<byte>("ShortcutType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("shortcutType");

                    b.Property<byte>("Tier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("tier");

                    b.HasKey("Id", "SpecIndex", "Location")
                        .HasName("PRIMARY");

                    b.ToTable("character_action_set_shortcut");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.CharacterAppearanceModel", b =>
                {
                    b.Property<ulong>("Id")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValue(0ul)
                        .HasColumnName("id");

                    b.Property<byte>("Slot")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("slot");

                    b.Property<ushort>("DisplayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(5) unsigned")
                        .HasDefaultValue((ushort)0)
                        .HasColumnName("displayId");

                    b.HasKey("Id", "Slot")
                        .HasName("PRIMARY");

                    b.ToTable("character_appearance");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.CharacterBoneModel", b =>
                {
                    b.Property<ulong>("Id")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValue(0ul)
                        .HasColumnName("id");

                    b.Property<byte>("BoneIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4) unsigned")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("boneIndex");

                    b.Property<float>("Bone")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0f)
                        .HasColumnName("bone");

                    b.HasKey("Id", "BoneIndex")
                        .HasName("PRIMARY");

                    b.ToTable("character_bone");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.CharacterContactModel", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValue(0ul)
                        .HasColumnName("id");

                    b.Property<ulong>("OwnerId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValue(0ul)
                        .HasColumnName("ownerId");

                    b.Property<ulong>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValue(0ul)
                        .HasColumnName("contactId");

                    b.Property<byte>("Accepted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(8) unsigned")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("accepted");

                    b.Property<string>("InviteMessage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("inviteMessage")
                        .HasDefaultValueSql("''");

                    b.Property<string>("PrivateNote")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("privateNote")
                        .HasDefaultValueSql("''");

                    b.Property<DateTime>("RequestTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("requestTime")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<uint>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(3) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("type");

                    b.HasKey("Id", "OwnerId", "ContactId")
                        .HasName("PRIMARY");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("contactGuid");

                    b.HasIndex("OwnerId");

                    b.ToTable("character_contact");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.CharacterCostumeItemModel", b =>
                {
                    b.Property<ulong>("Id")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValue(0ul)
                        .HasColumnName("id");

                    b.Property<byte>("Index")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("index");

                    b.Property<byte>("Slot")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("slot");

                    b.Property<int>("DyeData")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10)")
                        .HasDefaultValue(0)
                        .HasColumnName("dyeData");

                    b.Property<uint>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("itemId");

                    b.HasKey("Id", "Index", "Slot")
                        .HasName("PRIMARY");

                    b.ToTable("character_costume_item");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.CharacterCostumeModel", b =>
                {
                    b.Property<ulong>("Id")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValue(0ul)
                        .HasColumnName("id");

                    b.Property<byte>("Index")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("index");

                    b.Property<uint>("Mask")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("mask");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("timestamp")
                        .HasDefaultValueSql("current_timestamp()");

                    b.HasKey("Id", "Index")
                        .HasName("PRIMARY");

                    b.ToTable("character_costume");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.CharacterCreateModel", b =>
                {
                    b.Property<byte>("Race")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4) unsigned")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("race");

                    b.Property<ushort>("Faction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(5) unsigned")
                        .HasDefaultValue((ushort)0)
                        .HasColumnName("faction");

                    b.Property<byte>("CreationStart")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4) unsigned")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("creationStart");

                    b.Property<string>("Comment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(200)")
                        .HasDefaultValue("")
                        .HasColumnName("comment");

                    b.Property<float>("Rx")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0f)
                        .HasColumnName("rx");

                    b.Property<float>("Ry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0f)
                        .HasColumnName("ry");

                    b.Property<float>("Rz")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0f)
                        .HasColumnName("rz");

                    b.Property<uint>("WorldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("worldId");

                    b.Property<float>("X")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0f)
                        .HasColumnName("x");

                    b.Property<float>("Y")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0f)
                        .HasColumnName("y");

                    b.Property<float>("Z")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0f)
                        .HasColumnName("z");

                    b.HasKey("Race", "Faction", "CreationStart")
                        .HasName("PRIMARY");

                    b.ToTable("character_create");

                    b.HasData(
                        new
                        {
                            Race = (byte)1,
                            Faction = (ushort)167,
                            CreationStart = (byte)4,
                            Comment = "Exile Human - Novice",
                            Rx = -2.751458f,
                            Ry = 0f,
                            Rz = 0f,
                            WorldId = 3460u,
                            X = 29.1286f,
                            Y = -853.8716f,
                            Z = -560.188f
                        },
                        new
                        {
                            Race = (byte)1,
                            Faction = (ushort)167,
                            CreationStart = (byte)3,
                            Comment = "Exile Human - Veteran",
                            Rx = 0.317613f,
                            Ry = 0f,
                            Rz = 0f,
                            WorldId = 426u,
                            X = 4110.71f,
                            Y = -658.6249f,
                            Z = -5145.48f
                        },
                        new
                        {
                            Race = (byte)1,
                            Faction = (ushort)167,
                            CreationStart = (byte)5,
                            Comment = "Exile Human - Level 50",
                            Rx = 0f,
                            Ry = 0f,
                            Rz = 0f,
                            WorldId = 51u,
                            X = 4074.34f,
                            Y = -797.8368f,
                            Z = -2399.37f
                        },
                        new
                        {
                            Race = (byte)3,
                            Faction = (ushort)167,
                            CreationStart = (byte)4,
                            Comment = "Exile Granok - Novice",
                            Rx = -2.751458f,
                            Ry = 0f,
                            Rz = 0f,
                            WorldId = 3460u,
                            X = 29.1286f,
                            Y = -853.8716f,
                            Z = -560.188f
                        },
                        new
                        {
                            Race = (byte)3,
                            Faction = (ushort)167,
                            CreationStart = (byte)3,
                            Comment = "Exile Granok- Veteran",
                            Rx = 0.317613f,
                            Ry = 0f,
                            Rz = 0f,
                            WorldId = 426u,
                            X = 4110.71f,
                            Y = -658.6249f,
                            Z = -5145.48f
                        },
                        new
                        {
                            Race = (byte)3,
                            Faction = (ushort)167,
                            CreationStart = (byte)5,
                            Comment = "Exile Granok - Level 50",
                            Rx = 0f,
                            Ry = 0f,
                            Rz = 0f,
                            WorldId = 51u,
                            X = 4074.34f,
                            Y = -797.8368f,
                            Z = -2399.37f
                        },
                        new
                        {
                            Race = (byte)4,
                            Faction = (ushort)167,
                            CreationStart = (byte)4,
                            Comment = "Exile Aurin - Novice",
                            Rx = -2.751458f,
                            Ry = 0f,
                            Rz = 0f,
                            WorldId = 3460u,
                            X = 29.1286f,
                            Y = -853.8716f,
                            Z = -560.188f
                        },
                        new
                        {
                            Race = (byte)4,
                            Faction = (ushort)167,
                            CreationStart = (byte)3,
                            Comment = "Exile Aurin - Veteran",
                            Rx = -1.1214035f,
                            Ry = 0f,
                            Rz = 0f,
                            WorldId = 990u,
                            X = -771.823f,
                            Y = -904.2852f,
                            Z = -2269.56f
                        },
                        new
                        {
                            Race = (byte)4,
                            Faction = (ushort)167,
                            CreationStart = (byte)5,
                            Comment = "Exile Aurin - Level 50",
                            Rx = 0f,
                            Ry = 0f,
                            Rz = 0f,
                            WorldId = 51u,
                            X = 4074.34f,
                            Y = -797.8368f,
                            Z = -2399.37f
                        },
                        new
                        {
                            Race = (byte)16,
                            Faction = (ushort)167,
                            CreationStart = (byte)4,
                            Comment = "Exile Mordesh - Novice",
                            Rx = -2.751458f,
                            Ry = 0f,
                            Rz = 0f,
                            WorldId = 3460u,
                            X = 29.1286f,
                            Y = -853.8716f,
                            Z = -560.188f
                        },
                        new
                        {
                            Race = (byte)16,
                            Faction = (ushort)167,
                            CreationStart = (byte)3,
                            Comment = "Exile Mordesh - Veteran",
                            Rx = -1.1214035f,
                            Ry = 0f,
                            Rz = 0f,
                            WorldId = 990u,
                            X = -771.823f,
                            Y = -904.2852f,
                            Z = -2269.56f
                        },
                        new
                        {
                            Race = (byte)16,
                            Faction = (ushort)167,
                            CreationStart = (byte)5,
                            Comment = "Exile Mordesh - Level 50",
                            Rx = 0f,
                            Ry = 0f,
                            Rz = 0f,
                            WorldId = 51u,
                            X = 4074.34f,
                            Y = -797.8368f,
                            Z = -2399.37f
                        },
                        new
                        {
                            Race = (byte)13,
                            Faction = (ushort)166,
                            CreationStart = (byte)4,
                            Comment = "Dominion Chua - Novice",
                            Rx = -2.751458f,
                            Ry = 0f,
                            Rz = 0f,
                            WorldId = 3460u,
                            X = 29.1286f,
                            Y = -853.8716f,
                            Z = -560.188f
                        },
                        new
                        {
                            Race = (byte)13,
                            Faction = (ushort)166,
                            CreationStart = (byte)3,
                            Comment = "Dominion Chua - Veteran",
                            Rx = -2.215535f,
                            Ry = 0f,
                            Rz = 0f,
                            WorldId = 870u,
                            X = -8261.398f,
                            Y = -995.471f,
                            Z = -242.3648f
                        },
                        new
                        {
                            Race = (byte)13,
                            Faction = (ushort)166,
                            CreationStart = (byte)5,
                            Comment = "Dominion Chua - Level 50",
                            Rx = -0.7632219f,
                            Ry = 0f,
                            Rz = 0f,
                            WorldId = 22u,
                            X = -3343.58f,
                            Y = -887.4646f,
                            Z = -536.03f
                        },
                        new
                        {
                            Race = (byte)5,
                            Faction = (ushort)166,
                            CreationStart = (byte)4,
                            Comment = "Dominion Draken - Novice",
                            Rx = -2.751458f,
                            Ry = 0f,
                            Rz = 0f,
                            WorldId = 3460u,
                            X = 29.1286f,
                            Y = -853.8716f,
                            Z = -560.188f
                        },
                        new
                        {
                            Race = (byte)5,
                            Faction = (ushort)166,
                            CreationStart = (byte)3,
                            Comment = "Dominion Draken - Veteran",
                            Rx = -2.215535f,
                            Ry = 0f,
                            Rz = 0f,
                            WorldId = 870u,
                            X = -8261.398f,
                            Y = -995.471f,
                            Z = -242.3648f
                        },
                        new
                        {
                            Race = (byte)5,
                            Faction = (ushort)166,
                            CreationStart = (byte)5,
                            Comment = "Dominion Draken - Level 50",
                            Rx = -0.7632219f,
                            Ry = 0f,
                            Rz = 0f,
                            WorldId = 22u,
                            X = -3343.58f,
                            Y = -887.4646f,
                            Z = -536.03f
                        },
                        new
                        {
                            Race = (byte)1,
                            Faction = (ushort)166,
                            CreationStart = (byte)4,
                            Comment = "Dominion Cassian - Novice",
                            Rx = -2.751458f,
                            Ry = 0f,
                            Rz = 0f,
                            WorldId = 3460u,
                            X = 29.1286f,
                            Y = -853.8716f,
                            Z = -560.188f
                        },
                        new
                        {
                            Race = (byte)1,
                            Faction = (ushort)166,
                            CreationStart = (byte)3,
                            Comment = "Dominion Cassian - Veteran",
                            Rx = -0.45682f,
                            Ry = 0f,
                            Rz = 0f,
                            WorldId = 1387u,
                            X = -3835.341f,
                            Y = -980.2174f,
                            Z = -6050.524f
                        },
                        new
                        {
                            Race = (byte)1,
                            Faction = (ushort)166,
                            CreationStart = (byte)5,
                            Comment = "Dominion Cassian - Level 50",
                            Rx = -0.7632219f,
                            Ry = 0f,
                            Rz = 0f,
                            WorldId = 22u,
                            X = -3343.58f,
                            Y = -887.4646f,
                            Z = -536.03f
                        },
                        new
                        {
                            Race = (byte)12,
                            Faction = (ushort)166,
                            CreationStart = (byte)4,
                            Comment = "Dominion Mechari - Novice",
                            Rx = -2.751458f,
                            Ry = 0f,
                            Rz = 0f,
                            WorldId = 3460u,
                            X = 29.1286f,
                            Y = -853.8716f,
                            Z = -560.188f
                        },
                        new
                        {
                            Race = (byte)12,
                            Faction = (ushort)166,
                            CreationStart = (byte)3,
                            Comment = "Dominion Mechari - Veteran",
                            Rx = -0.45682f,
                            Ry = 0f,
                            Rz = 0f,
                            WorldId = 1387u,
                            X = -3835.341f,
                            Y = -980.2174f,
                            Z = -6050.524f
                        },
                        new
                        {
                            Race = (byte)12,
                            Faction = (ushort)166,
                            CreationStart = (byte)5,
                            Comment = "Dominion Mechari - Level 50",
                            Rx = -0.7632219f,
                            Ry = 0f,
                            Rz = 0f,
                            WorldId = 22u,
                            X = -3343.58f,
                            Y = -887.4646f,
                            Z = -536.03f
                        });
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.CharacterCurrencyModel", b =>
                {
                    b.Property<ulong>("Id")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValue(0ul)
                        .HasColumnName("id");

                    b.Property<byte>("CurrencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4) unsigned")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("currencyId");

                    b.Property<ulong>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValue(0ul)
                        .HasColumnName("amount");

                    b.HasKey("Id", "CurrencyId")
                        .HasName("PRIMARY");

                    b.ToTable("character_currency");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.CharacterCustomisationModel", b =>
                {
                    b.Property<ulong>("Id")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValue(0ul)
                        .HasColumnName("id");

                    b.Property<uint>("Label")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("label");

                    b.Property<uint>("Value")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("value");

                    b.HasKey("Id", "Label")
                        .HasName("PRIMARY");

                    b.ToTable("character_customisation");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.CharacterDatacubeModel", b =>
                {
                    b.Property<ulong>("Id")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValue(0ul)
                        .HasColumnName("id");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("type");

                    b.Property<ushort>("Datacube")
                        .HasColumnType("smallint(5) unsigned")
                        .HasDefaultValue((ushort)0)
                        .HasColumnName("datacube");

                    b.Property<uint>("Progress")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("progress");

                    b.HasKey("Id", "Type", "Datacube")
                        .HasName("PRIMARY");

                    b.ToTable("character_datacube");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.CharacterEntitlementModel", b =>
                {
                    b.Property<ulong>("Id")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValue(0ul)
                        .HasColumnName("id");

                    b.Property<byte>("EntitlementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("entitlementId");

                    b.Property<uint>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("amount");

                    b.HasKey("Id", "EntitlementId")
                        .HasName("PRIMARY");

                    b.ToTable("character_entitlement");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.CharacterKeybindingModel", b =>
                {
                    b.Property<ulong>("Id")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValue(0ul)
                        .HasColumnName("id");

                    b.Property<ushort>("InputActionId")
                        .HasColumnType("smallint(5) unsigned")
                        .HasDefaultValue((ushort)0)
                        .HasColumnName("inputActionId");

                    b.Property<uint>("Code00")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("code00");

                    b.Property<uint>("Code01")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("code01");

                    b.Property<uint>("Code02")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("code02");

                    b.Property<uint>("DeviceEnum00")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("deviceEnum00");

                    b.Property<uint>("DeviceEnum01")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("deviceEnum01");

                    b.Property<uint>("DeviceEnum02")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("deviceEnum02");

                    b.Property<uint>("EventTypeEnum00")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("eventTypeEnum00");

                    b.Property<uint>("EventTypeEnum01")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("eventTypeEnum01");

                    b.Property<uint>("EventTypeEnum02")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("eventTypeEnum02");

                    b.Property<uint>("MetaKeys00")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("metaKeys00");

                    b.Property<uint>("MetaKeys01")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("metaKeys01");

                    b.Property<uint>("MetaKeys02")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("metaKeys02");

                    b.HasKey("Id", "InputActionId")
                        .HasName("PRIMARY");

                    b.ToTable("character_keybinding");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.CharacterMailAttachmentModel", b =>
                {
                    b.Property<ulong>("Id")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValue(0ul)
                        .HasColumnName("id");

                    b.Property<uint>("Index")
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("index");

                    b.Property<ulong>("ItemGuid")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValue(0ul)
                        .HasColumnName("itemGuid");

                    b.HasKey("Id", "Index")
                        .HasName("PRIMARY");

                    b.HasIndex("ItemGuid")
                        .IsUnique()
                        .HasDatabaseName("itemGuid");

                    b.ToTable("character_mail_attachment");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.CharacterMailModel", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValue(0ul)
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createTime")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<uint>("CreatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("creatureId");

                    b.Property<ulong>("CurrencyAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValue(0ul)
                        .HasColumnName("currencyAmount");

                    b.Property<byte>("CurrencyType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("currencyType");

                    b.Property<byte>("DeliveryTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(8) unsigned")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("deliveryTime");

                    b.Property<byte>("Flags")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(8) unsigned")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("flags");

                    b.Property<byte>("HasPaidOrCollectedCurrency")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(8) unsigned")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("hasPaidOrCollectedCurrency");

                    b.Property<byte>("IsCashOnDelivery")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(8) unsigned")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("isCashOnDelivery");

                    b.Property<string>("Message")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(2000)")
                        .HasDefaultValue("")
                        .HasColumnName("message");

                    b.Property<ulong>("RecipientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValue(0ul)
                        .HasColumnName("recipientId");

                    b.Property<ulong>("SenderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValue(0ul)
                        .HasColumnName("senderId");

                    b.Property<byte>("SenderType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("senderType");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(200)")
                        .HasDefaultValue("")
                        .HasColumnName("subject");

                    b.Property<uint>("TextEntryMessage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("textEntryMessage");

                    b.Property<uint>("TextEntrySubject")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("textEntrySubject");

                    b.HasKey("Id");

                    b.HasIndex("RecipientId")
                        .HasDatabaseName("FK__character_mail_recipientId__character_id");

                    b.ToTable("character_mail");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.CharacterModel", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValue(0ul)
                        .HasColumnName("id");

                    b.Property<uint>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("accountId");

                    b.Property<sbyte>("ActiveCostumeIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasDefaultValue((sbyte)-1)
                        .HasColumnName("activeCostumeIndex");

                    b.Property<uint>("ActivePath")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("activePath");

                    b.Property<byte>("ActiveSpec")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("activeSpec");

                    b.Property<ushort>("BindPoint")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(5) unsigned")
                        .HasColumnName("bindPoint")
                        .HasDefaultValueSql("'0'");

                    b.Property<byte>("Class")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("class");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createTime")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime")
                        .HasColumnName("deleteTime");

                    b.Property<ushort>("FactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(5) unsigned")
                        .HasDefaultValue((ushort)0)
                        .HasColumnName("factionId");

                    b.Property<uint>("Flags")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("flags");

                    b.Property<ulong?>("GuildAffiliation")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("guildAffiliation");

                    b.Property<byte>("InnateIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("innateIndex");

                    b.Property<sbyte>("InputKeySet")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4)")
                        .HasDefaultValue((sbyte)0)
                        .HasColumnName("inputKeySet");

                    b.Property<DateTime?>("LastOnline")
                        .HasColumnType("datetime")
                        .HasColumnName("lastOnline");

                    b.Property<byte>("Level")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("level");

                    b.Property<float>("LocationX")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0f)
                        .HasColumnName("locationX");

                    b.Property<float>("LocationY")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0f)
                        .HasColumnName("locationY");

                    b.Property<float>("LocationZ")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0f)
                        .HasColumnName("locationZ");

                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("")
                        .HasColumnName("name");

                    b.Property<string>("OriginalName")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("originalName");

                    b.Property<DateTime>("PathActivatedTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("pathActivatedTimestamp")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<byte>("Race")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("race");

                    b.Property<uint>("RestBonusXp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("restBonusXp");

                    b.Property<float>("RotationX")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0f)
                        .HasColumnName("rotationX");

                    b.Property<float>("RotationY")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0f)
                        .HasColumnName("rotationY");

                    b.Property<float>("RotationZ")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0f)
                        .HasColumnName("rotationZ");

                    b.Property<byte>("Sex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("sex");

                    b.Property<uint>("TimePlayedLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("timePlayedLevel");

                    b.Property<uint>("TimePlayedTotal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("timePlayedTotal");

                    b.Property<ushort>("Title")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(5) unsigned")
                        .HasDefaultValue((ushort)0)
                        .HasColumnName("title");

                    b.Property<uint>("TotalXp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("totalXp");

                    b.Property<ushort>("WorldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(5) unsigned")
                        .HasDefaultValue((ushort)0)
                        .HasColumnName("worldId");

                    b.Property<ushort>("WorldZoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(5) unsigned")
                        .HasDefaultValue((ushort)0)
                        .HasColumnName("worldZoneId");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("accountId");

                    b.ToTable("character");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.CharacterPathModel", b =>
                {
                    b.Property<ulong>("Id")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValue(0ul)
                        .HasColumnName("id");

                    b.Property<byte>("Path")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("path");

                    b.Property<byte>("LevelRewarded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4) unsigned")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("levelRewarded");

                    b.Property<uint>("TotalXp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("totalXp");

                    b.Property<byte>("Unlocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1) unsigned")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("unlocked");

                    b.HasKey("Id", "Path")
                        .HasName("PRIMARY");

                    b.ToTable("character_path");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.CharacterPetCustomisationModel", b =>
                {
                    b.Property<ulong>("Id")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValue(0ul)
                        .HasColumnName("id");

                    b.Property<byte>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("type");

                    b.Property<uint>("ObjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("objectId");

                    b.Property<ulong>("FlairIdMask")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValue(0ul)
                        .HasColumnName("flairIdMask");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(128)")
                        .HasDefaultValue("")
                        .HasColumnName("name");

                    b.HasKey("Id", "Type", "ObjectId")
                        .HasName("PRIMARY");

                    b.ToTable("character_pet_customisation");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.CharacterPetFlairModel", b =>
                {
                    b.Property<ulong>("Id")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValue(0ul)
                        .HasColumnName("id");

                    b.Property<uint>("PetFlairId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("petFlairId");

                    b.HasKey("Id", "PetFlairId")
                        .HasName("PRIMARY");

                    b.ToTable("character_pet_flair");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.CharacterQuestModel", b =>
                {
                    b.Property<ulong>("Id")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValue(0ul)
                        .HasColumnName("id");

                    b.Property<ushort>("QuestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(5) unsigned")
                        .HasDefaultValue((ushort)0)
                        .HasColumnName("questId");

                    b.Property<byte>("Flags")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("flags");

                    b.Property<DateTime?>("Reset")
                        .HasColumnType("datetime")
                        .HasColumnName("reset");

                    b.Property<byte>("State")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("state");

                    b.Property<uint?>("Timer")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("timer");

                    b.HasKey("Id", "QuestId")
                        .HasName("PRIMARY");

                    b.ToTable("character_quest");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.CharacterQuestObjectiveModel", b =>
                {
                    b.Property<ulong>("Id")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValue(0ul)
                        .HasColumnName("id");

                    b.Property<ushort>("QuestId")
                        .HasColumnType("smallint(5) unsigned")
                        .HasDefaultValue((ushort)0)
                        .HasColumnName("questId");

                    b.Property<byte>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("index");

                    b.Property<uint>("Progress")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("progress");

                    b.Property<uint?>("Timer")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("timer");

                    b.HasKey("Id", "QuestId", "Index")
                        .HasName("PRIMARY");

                    b.ToTable("character_quest_objective");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.CharacterReputation", b =>
                {
                    b.Property<ulong>("Id")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValue(0ul)
                        .HasColumnName("id");

                    b.Property<uint>("FactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("factionId");

                    b.Property<float>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0f)
                        .HasColumnName("amount");

                    b.HasKey("Id", "FactionId")
                        .HasName("PRIMARY");

                    b.ToTable("character_reputation");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.CharacterRewardTrackMilestoneModel", b =>
                {
                    b.Property<ulong>("Id")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValue(0ul)
                        .HasColumnName("id");

                    b.Property<uint>("RewardTrackId")
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("rewardTrackId");

                    b.Property<uint>("MilestoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("milestoneId");

                    b.Property<int>("Choice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(-1)
                        .HasColumnName("choice");

                    b.Property<uint>("PointsRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("pointsRequired");

                    b.HasKey("Id", "RewardTrackId", "MilestoneId")
                        .HasName("PRIMARY");

                    b.ToTable("character_reward_track_milestone");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.CharacterRewardTrackModel", b =>
                {
                    b.Property<ulong>("Id")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValue(0ul)
                        .HasColumnName("id");

                    b.Property<uint>("RewardTrackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("rewardTrackId");

                    b.Property<uint>("Points")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("points");

                    b.HasKey("Id", "RewardTrackId")
                        .HasName("PRIMARY");

                    b.ToTable("character_reward_track");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.CharacterSpellModel", b =>
                {
                    b.Property<ulong>("Id")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValue(0ul)
                        .HasColumnName("id");

                    b.Property<uint>("Spell4BaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("spell4BaseId");

                    b.Property<byte>("Tier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("tier");

                    b.HasKey("Id", "Spell4BaseId")
                        .HasName("PRIMARY");

                    b.ToTable("character_spell");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.CharacterStatModel", b =>
                {
                    b.Property<ulong>("Id")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValue(0ul)
                        .HasColumnName("id");

                    b.Property<byte>("Stat")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("stat");

                    b.Property<float>("Value")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0f)
                        .HasColumnName("value");

                    b.HasKey("Id", "Stat")
                        .HasName("PRIMARY");

                    b.ToTable("character_stats");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.CharacterTitleModel", b =>
                {
                    b.Property<ulong>("Id")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValue(0ul)
                        .HasColumnName("id");

                    b.Property<ushort>("Title")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(5) unsigned")
                        .HasDefaultValue((ushort)0)
                        .HasColumnName("title");

                    b.Property<byte>("Revoked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(4) unsigned")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("revoked");

                    b.Property<uint>("TimeRemaining")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("timeRemaining");

                    b.HasKey("Id", "Title")
                        .HasName("PRIMARY");

                    b.ToTable("character_title");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.CharacterTradeskillMaterialModel", b =>
                {
                    b.Property<ulong>("Id")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValue(0ul)
                        .HasColumnName("id");

                    b.Property<ushort>("MaterialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(5) unsigned")
                        .HasDefaultValue((ushort)0)
                        .HasColumnName("materialId");

                    b.Property<ushort>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(5) unsigned")
                        .HasDefaultValue((ushort)0)
                        .HasColumnName("amount");

                    b.HasKey("Id", "MaterialId")
                        .HasName("PRIMARY");

                    b.ToTable("character_tradeskill_materials");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.CharacterZonemapHexgroupModel", b =>
                {
                    b.Property<ulong>("Id")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValue(0ul)
                        .HasColumnName("id");

                    b.Property<ushort>("ZoneMap")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(5) unsigned")
                        .HasDefaultValue((ushort)0)
                        .HasColumnName("zoneMap");

                    b.Property<ushort>("HexGroup")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(5) unsigned")
                        .HasDefaultValue((ushort)0)
                        .HasColumnName("hexGroup");

                    b.HasKey("Id", "ZoneMap", "HexGroup")
                        .HasName("PRIMARY");

                    b.ToTable("character_zonemap_hexgroup");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.ChatChannelMemberModel", b =>
                {
                    b.Property<ulong>("Id")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValue(0ul)
                        .HasColumnName("id");

                    b.Property<ulong>("CharacterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValue(0ul)
                        .HasColumnName("characterId");

                    b.Property<byte>("Flags")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("flags");

                    b.HasKey("Id", "CharacterId")
                        .HasName("PRIMARY");

                    b.ToTable("chat_channel_member");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.ChatChannelModel", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValue(0ul)
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("")
                        .HasColumnName("password");

                    b.Property<byte>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("chat_channel");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.GuildAchievementModel", b =>
                {
                    b.Property<ulong>("Id")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValue(0ul)
                        .HasColumnName("id");

                    b.Property<ushort>("AchievementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(5) unsigned")
                        .HasDefaultValue((ushort)0)
                        .HasColumnName("achievementId");

                    b.Property<uint>("Data0")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("data0");

                    b.Property<uint>("Data1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("data1");

                    b.Property<DateTime?>("DateCompleted")
                        .HasColumnType("datetime")
                        .HasColumnName("dateCompleted");

                    b.HasKey("Id", "AchievementId")
                        .HasName("PRIMARY");

                    b.ToTable("guild_achievement");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.GuildDataModel", b =>
                {
                    b.Property<ulong>("Id")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValue(0ul)
                        .HasColumnName("id");

                    b.Property<string>("AdditionalInfo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(400)")
                        .HasDefaultValue("")
                        .HasColumnName("additionalInfo");

                    b.Property<ushort>("BackgroundIconPartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(5) unsigned")
                        .HasDefaultValue((ushort)0)
                        .HasColumnName("backgroundIconPartId");

                    b.Property<ushort>("ForegroundIconPartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(5) unsigned")
                        .HasDefaultValue((ushort)0)
                        .HasColumnName("foregroundIconPartId");

                    b.Property<string>("MessageOfTheDay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(200)")
                        .HasDefaultValue("")
                        .HasColumnName("motd");

                    b.Property<ushort>("ScanLinesPartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(5) unsigned")
                        .HasDefaultValue((ushort)0)
                        .HasColumnName("scanLinesPartId");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("guild_guild_data");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.GuildMemberModel", b =>
                {
                    b.Property<ulong>("Id")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValue(0ul)
                        .HasColumnName("id");

                    b.Property<ulong>("CharacterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValue(0ul)
                        .HasColumnName("characterId");

                    b.Property<int>("CommunityPlotReservation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValue(-1)
                        .HasColumnName("communityPlotReservation");

                    b.Property<string>("Note")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(32)")
                        .HasDefaultValue("")
                        .HasColumnName("note");

                    b.Property<byte>("Rank")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("rank");

                    b.HasKey("Id", "CharacterId")
                        .HasName("PRIMARY");

                    b.ToTable("guild_member");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.GuildModel", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValue(0ul)
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createTime")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime")
                        .HasColumnName("deleteTime");

                    b.Property<uint>("Flags")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("flags");

                    b.Property<ulong?>("LeaderId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("leaderId");

                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(30)")
                        .HasDefaultValue("")
                        .HasColumnName("name");

                    b.Property<ulong?>("OriginalLeaderId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("originalLeaderId");

                    b.Property<string>("OriginalName")
                        .HasColumnType("varchar(30)")
                        .HasColumnName("originalName");

                    b.Property<byte>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("guild");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.GuildRankModel", b =>
                {
                    b.Property<ulong>("Id")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValue(0ul)
                        .HasColumnName("id");

                    b.Property<byte>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("index");

                    b.Property<ulong>("BankWithdrawalPermission")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValue(0ul)
                        .HasColumnName("bankWithdrawPermission");

                    b.Property<ulong>("MoneyWithdrawalLimit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValue(0ul)
                        .HasColumnName("moneyWithdrawalLimit");

                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(16)")
                        .HasDefaultValue("")
                        .HasColumnName("name");

                    b.Property<uint>("Permission")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("permission");

                    b.Property<ulong>("RepairLimit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValue(0ul)
                        .HasColumnName("repairLimit");

                    b.HasKey("Id", "Index")
                        .HasName("PRIMARY");

                    b.ToTable("guild_rank");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.ItemModel", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValue(0ul)
                        .HasColumnName("id");

                    b.Property<uint>("BagIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("bagIndex");

                    b.Property<uint>("Charges")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("charges");

                    b.Property<float>("Durability")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0f)
                        .HasColumnName("durability");

                    b.Property<uint>("ExpirationTimeLeft")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("expirationTimeLeft");

                    b.Property<uint>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("itemId");

                    b.Property<ushort>("Location")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(5) unsigned")
                        .HasDefaultValue((ushort)0)
                        .HasColumnName("location");

                    b.Property<ulong?>("OwnerId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("ownerId");

                    b.Property<uint>("StackCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("stackCount");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("FK__item_ownerId__character_id");

                    b.ToTable("item");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.PropertyBaseModel", b =>
                {
                    b.Property<uint>("Type")
                        .HasColumnType("int unsigned")
                        .HasColumnName("type")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("Subtype")
                        .HasColumnType("int unsigned")
                        .HasColumnName("subtype")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("Property")
                        .HasColumnType("int unsigned")
                        .HasColumnName("property")
                        .HasDefaultValueSql("'0'");

                    b.Property<ushort>("ModType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("modType")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Note")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("note")
                        .HasDefaultValueSql("''");

                    b.Property<float>("Value")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasColumnName("value")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("Type", "Subtype", "Property")
                        .HasName("PRIMARY");

                    b.ToTable("property_base");

                    b.HasData(
                        new
                        {
                            Type = 0u,
                            Subtype = 0u,
                            Property = 0u,
                            ModType = (ushort)0,
                            Note = "Player - Base Strength",
                            Value = 0f
                        },
                        new
                        {
                            Type = 0u,
                            Subtype = 0u,
                            Property = 1u,
                            ModType = (ushort)0,
                            Note = "Player - Base Dexterity",
                            Value = 0f
                        },
                        new
                        {
                            Type = 0u,
                            Subtype = 0u,
                            Property = 2u,
                            ModType = (ushort)0,
                            Note = "Player - Base Technology",
                            Value = 0f
                        },
                        new
                        {
                            Type = 0u,
                            Subtype = 0u,
                            Property = 3u,
                            ModType = (ushort)0,
                            Note = "Player - Base Magic",
                            Value = 0f
                        },
                        new
                        {
                            Type = 0u,
                            Subtype = 0u,
                            Property = 4u,
                            ModType = (ushort)0,
                            Note = "Player - Base Wisdom",
                            Value = 0f
                        },
                        new
                        {
                            Type = 0u,
                            Subtype = 0u,
                            Property = 7u,
                            ModType = (ushort)1,
                            Note = "Player - Base HP per Level",
                            Value = 200f
                        },
                        new
                        {
                            Type = 0u,
                            Subtype = 0u,
                            Property = 9u,
                            ModType = (ushort)0,
                            Note = "Player - Base Endurance",
                            Value = 500f
                        },
                        new
                        {
                            Type = 0u,
                            Subtype = 0u,
                            Property = 16u,
                            ModType = (ushort)0,
                            Note = "Player - Base Endurance Regen",
                            Value = 0.0225f
                        },
                        new
                        {
                            Type = 0u,
                            Subtype = 0u,
                            Property = 35u,
                            ModType = (ushort)1,
                            Note = "Player - Base Assault Rating per Level",
                            Value = 18f
                        },
                        new
                        {
                            Type = 0u,
                            Subtype = 0u,
                            Property = 36u,
                            ModType = (ushort)1,
                            Note = "Player - Base Support Rating per Level",
                            Value = 18f
                        },
                        new
                        {
                            Type = 0u,
                            Subtype = 0u,
                            Property = 38u,
                            ModType = (ushort)0,
                            Note = "Player - Base Dash Energy",
                            Value = 200f
                        },
                        new
                        {
                            Type = 0u,
                            Subtype = 0u,
                            Property = 39u,
                            ModType = (ushort)0,
                            Note = "Player - Base Dash Energy Regen",
                            Value = 0.045f
                        },
                        new
                        {
                            Type = 0u,
                            Subtype = 0u,
                            Property = 41u,
                            ModType = (ushort)0,
                            Note = "Player - Shield Capacity Base",
                            Value = 0f
                        },
                        new
                        {
                            Type = 0u,
                            Subtype = 0u,
                            Property = 100u,
                            ModType = (ushort)0,
                            Note = "Player - Base Movement Speed",
                            Value = 1f
                        },
                        new
                        {
                            Type = 0u,
                            Subtype = 0u,
                            Property = 101u,
                            ModType = (ushort)0,
                            Note = "Player - Base Avoid Chance",
                            Value = 0.05f
                        },
                        new
                        {
                            Type = 0u,
                            Subtype = 0u,
                            Property = 102u,
                            ModType = (ushort)0,
                            Note = "Player - Base Crit Chance",
                            Value = 0.05f
                        },
                        new
                        {
                            Type = 0u,
                            Subtype = 0u,
                            Property = 107u,
                            ModType = (ushort)0,
                            Note = "Player - Base Focus Recovery In Combat",
                            Value = 0f
                        },
                        new
                        {
                            Type = 0u,
                            Subtype = 0u,
                            Property = 108u,
                            ModType = (ushort)0,
                            Note = "Player - Base Focus Recovery Out of Combat",
                            Value = 0f
                        },
                        new
                        {
                            Type = 0u,
                            Subtype = 0u,
                            Property = 112u,
                            ModType = (ushort)0,
                            Note = "Player - Base Multi-Hit Amount",
                            Value = 0.3f
                        },
                        new
                        {
                            Type = 0u,
                            Subtype = 0u,
                            Property = 130u,
                            ModType = (ushort)0,
                            Note = "Player - Base Gravity Multiplier",
                            Value = 0.8f
                        },
                        new
                        {
                            Type = 0u,
                            Subtype = 0u,
                            Property = 150u,
                            ModType = (ushort)0,
                            Note = "Player - Base Damage Taken Offset - Physical",
                            Value = 1f
                        },
                        new
                        {
                            Type = 0u,
                            Subtype = 0u,
                            Property = 151u,
                            ModType = (ushort)0,
                            Note = "Player - Base Damage Taken Offset - Tech",
                            Value = 1f
                        },
                        new
                        {
                            Type = 0u,
                            Subtype = 0u,
                            Property = 152u,
                            ModType = (ushort)0,
                            Note = "Player - Base Damage Taken Offset - Magic",
                            Value = 1f
                        },
                        new
                        {
                            Type = 0u,
                            Subtype = 0u,
                            Property = 154u,
                            ModType = (ushort)0,
                            Note = "Player - Base Mutli-Hit Chance",
                            Value = 0.05f
                        },
                        new
                        {
                            Type = 0u,
                            Subtype = 0u,
                            Property = 155u,
                            ModType = (ushort)0,
                            Note = "Player - Base Damage Reflect Amount",
                            Value = 0.05f
                        },
                        new
                        {
                            Type = 0u,
                            Subtype = 0u,
                            Property = 191u,
                            ModType = (ushort)0,
                            Note = "Player - Base Mount Movement Speed",
                            Value = 1f
                        },
                        new
                        {
                            Type = 0u,
                            Subtype = 0u,
                            Property = 195u,
                            ModType = (ushort)0,
                            Note = "Player - Base Glance Amount",
                            Value = 0.3f
                        },
                        new
                        {
                            Type = 1u,
                            Subtype = 1u,
                            Property = 10u,
                            ModType = (ushort)2,
                            Note = "Class - Warrior - Base Kinetic Energy Cap",
                            Value = 1000f
                        },
                        new
                        {
                            Type = 0u,
                            Subtype = 0u,
                            Property = 17u,
                            ModType = (ushort)2,
                            Note = "Class - Warrior - Base Kinetic Energy Regen",
                            Value = 1f
                        },
                        new
                        {
                            Type = 1u,
                            Subtype = 2u,
                            Property = 10u,
                            ModType = (ushort)2,
                            Note = "Class - Engineer - Base Volatile Energy Cap",
                            Value = 100f
                        },
                        new
                        {
                            Type = 1u,
                            Subtype = 3u,
                            Property = 10u,
                            ModType = (ushort)2,
                            Note = "Class - Esper - Base Psi Point Cap",
                            Value = 5f
                        },
                        new
                        {
                            Type = 1u,
                            Subtype = 4u,
                            Property = 10u,
                            ModType = (ushort)2,
                            Note = "Class - Medic - Base Medic Core Cap",
                            Value = 4f
                        },
                        new
                        {
                            Type = 1u,
                            Subtype = 5u,
                            Property = 12u,
                            ModType = (ushort)2,
                            Note = "Class - Stalker - Base Suit Power Cap",
                            Value = 100f
                        },
                        new
                        {
                            Type = 1u,
                            Subtype = 5u,
                            Property = 19u,
                            ModType = (ushort)2,
                            Note = "Class - Stalker - Base Suit Power Regeneration Rate",
                            Value = 0.035f
                        },
                        new
                        {
                            Type = 1u,
                            Subtype = 7u,
                            Property = 13u,
                            ModType = (ushort)2,
                            Note = "Class - Spellslinger - Base Spell Power Cap",
                            Value = 100f
                        },
                        new
                        {
                            Type = 1u,
                            Subtype = 4u,
                            Property = 5u,
                            ModType = (ushort)2,
                            Note = "Class - Medic - Base Focus Pool",
                            Value = 1000f
                        },
                        new
                        {
                            Type = 1u,
                            Subtype = 7u,
                            Property = 5u,
                            ModType = (ushort)2,
                            Note = "Class - Spellslinger - Base Focus Pool",
                            Value = 1000f
                        },
                        new
                        {
                            Type = 1u,
                            Subtype = 3u,
                            Property = 5u,
                            ModType = (ushort)2,
                            Note = "Class - Esper - Base Focus Pool",
                            Value = 1000f
                        },
                        new
                        {
                            Type = 1u,
                            Subtype = 4u,
                            Property = 107u,
                            ModType = (ushort)2,
                            Note = "Class - Medic - Base Focus Recovery Rate In Combat",
                            Value = 0.005f
                        },
                        new
                        {
                            Type = 1u,
                            Subtype = 7u,
                            Property = 107u,
                            ModType = (ushort)2,
                            Note = "Class - Spellslinger - Focus Recovery Rate In Combat",
                            Value = 0.005f
                        },
                        new
                        {
                            Type = 1u,
                            Subtype = 3u,
                            Property = 107u,
                            ModType = (ushort)2,
                            Note = "Class - Esper - Focus Recovery Rate In Combat",
                            Value = 0.005f
                        },
                        new
                        {
                            Type = 1u,
                            Subtype = 4u,
                            Property = 108u,
                            ModType = (ushort)2,
                            Note = "Class - Medic - Base Focus Recovery Rate Out of Combat",
                            Value = 0.02f
                        },
                        new
                        {
                            Type = 1u,
                            Subtype = 7u,
                            Property = 108u,
                            ModType = (ushort)2,
                            Note = "Class - Spellslinger - Focus Recovery Rate Out of Combat",
                            Value = 0.02f
                        },
                        new
                        {
                            Type = 1u,
                            Subtype = 3u,
                            Property = 108u,
                            ModType = (ushort)2,
                            Note = "Class - Esper - Focus Recovery Rate Out of Combat",
                            Value = 0.02f
                        },
                        new
                        {
                            Type = 2u,
                            Subtype = 1u,
                            Property = 7u,
                            ModType = (ushort)1,
                            Note = "Item - Chest - HP per Eff. Level",
                            Value = 75f
                        },
                        new
                        {
                            Type = 2u,
                            Subtype = 2u,
                            Property = 7u,
                            ModType = (ushort)1,
                            Note = "Item - Legs - HP per Eff. Level",
                            Value = 75f
                        },
                        new
                        {
                            Type = 2u,
                            Subtype = 3u,
                            Property = 7u,
                            ModType = (ushort)1,
                            Note = "Item - Head - HP per Eff. Level",
                            Value = 45f
                        },
                        new
                        {
                            Type = 2u,
                            Subtype = 4u,
                            Property = 7u,
                            ModType = (ushort)1,
                            Note = "Item - Shoulder - HP per Eff. Level",
                            Value = 60f
                        },
                        new
                        {
                            Type = 2u,
                            Subtype = 5u,
                            Property = 7u,
                            ModType = (ushort)1,
                            Note = "Item - Feet - HP per Eff. Level",
                            Value = 45f
                        },
                        new
                        {
                            Type = 2u,
                            Subtype = 6u,
                            Property = 7u,
                            ModType = (ushort)1,
                            Note = "Item - Hands - HP per Eff. Level",
                            Value = 45f
                        },
                        new
                        {
                            Type = 2u,
                            Subtype = 1u,
                            Property = 35u,
                            ModType = (ushort)1,
                            Note = "Item - Chest - Attack Power per Eff. Level",
                            Value = 4.5f
                        },
                        new
                        {
                            Type = 2u,
                            Subtype = 2u,
                            Property = 35u,
                            ModType = (ushort)1,
                            Note = "Item - Legs - Attack Power per Eff. Level",
                            Value = 4.5f
                        },
                        new
                        {
                            Type = 2u,
                            Subtype = 3u,
                            Property = 35u,
                            ModType = (ushort)1,
                            Note = "Item - Head - Attack Power per Eff. Level",
                            Value = 2.7f
                        },
                        new
                        {
                            Type = 2u,
                            Subtype = 4u,
                            Property = 35u,
                            ModType = (ushort)1,
                            Note = "Item - Shoulder - Attack Power per Eff. Level",
                            Value = 3.6f
                        },
                        new
                        {
                            Type = 2u,
                            Subtype = 5u,
                            Property = 35u,
                            ModType = (ushort)1,
                            Note = "Item - Feet - Attack Power per Eff. Level",
                            Value = 2.7f
                        },
                        new
                        {
                            Type = 2u,
                            Subtype = 6u,
                            Property = 35u,
                            ModType = (ushort)1,
                            Note = "Item - Hands - Attack Power per Eff. Level",
                            Value = 2.7f
                        },
                        new
                        {
                            Type = 2u,
                            Subtype = 7u,
                            Property = 35u,
                            ModType = (ushort)1,
                            Note = "Item - Tool - Attack Power per Eff. Level",
                            Value = 3.6f
                        },
                        new
                        {
                            Type = 2u,
                            Subtype = 20u,
                            Property = 35u,
                            ModType = (ushort)1,
                            Note = "Item - Weapon - Attack Power per Eff. Level",
                            Value = 83.53f
                        },
                        new
                        {
                            Type = 2u,
                            Subtype = 58u,
                            Property = 35u,
                            ModType = (ushort)1,
                            Note = "Item - Support System - Attack Power per Eff. Level",
                            Value = 3.6f
                        },
                        new
                        {
                            Type = 2u,
                            Subtype = 59u,
                            Property = 35u,
                            ModType = (ushort)1,
                            Note = "Item - Augment - Attack Power per Eff. Level",
                            Value = 3.6f
                        },
                        new
                        {
                            Type = 2u,
                            Subtype = 60u,
                            Property = 35u,
                            ModType = (ushort)1,
                            Note = "Item - Implant - Attack Power per Eff. Level",
                            Value = 3.6f
                        },
                        new
                        {
                            Type = 2u,
                            Subtype = 1u,
                            Property = 36u,
                            ModType = (ushort)1,
                            Note = "Item - Chest - Support Power per Eff. Level",
                            Value = 4.5f
                        },
                        new
                        {
                            Type = 2u,
                            Subtype = 2u,
                            Property = 36u,
                            ModType = (ushort)1,
                            Note = "Item - Legs - Support Power per Eff. Level",
                            Value = 4.5f
                        },
                        new
                        {
                            Type = 2u,
                            Subtype = 3u,
                            Property = 36u,
                            ModType = (ushort)1,
                            Note = "Item - Head - Support Power per Eff. Level",
                            Value = 2.7f
                        },
                        new
                        {
                            Type = 2u,
                            Subtype = 4u,
                            Property = 36u,
                            ModType = (ushort)1,
                            Note = "Item - Shoulder - Support Power per Eff. Level",
                            Value = 3.6f
                        },
                        new
                        {
                            Type = 2u,
                            Subtype = 5u,
                            Property = 36u,
                            ModType = (ushort)1,
                            Note = "Item - Feet - Support Power per Eff. Level",
                            Value = 2.7f
                        },
                        new
                        {
                            Type = 2u,
                            Subtype = 6u,
                            Property = 36u,
                            ModType = (ushort)1,
                            Note = "Item - Hands - Support Power per Eff. Level",
                            Value = 2.7f
                        },
                        new
                        {
                            Type = 2u,
                            Subtype = 7u,
                            Property = 36u,
                            ModType = (ushort)1,
                            Note = "Item - Tool - Support Power per Eff. Level",
                            Value = 3.6f
                        },
                        new
                        {
                            Type = 2u,
                            Subtype = 20u,
                            Property = 36u,
                            ModType = (ushort)1,
                            Note = "Item - Weapon - Support Power per Eff. Level",
                            Value = 83.53f
                        },
                        new
                        {
                            Type = 2u,
                            Subtype = 58u,
                            Property = 36u,
                            ModType = (ushort)1,
                            Note = "Item - Support System - Support Power per Eff. Level",
                            Value = 3.6f
                        },
                        new
                        {
                            Type = 2u,
                            Subtype = 59u,
                            Property = 36u,
                            ModType = (ushort)1,
                            Note = "Item - Augment - Support Power per Eff. Level",
                            Value = 3.6f
                        },
                        new
                        {
                            Type = 2u,
                            Subtype = 60u,
                            Property = 36u,
                            ModType = (ushort)1,
                            Note = "Item - Implant - Support Power per Eff. Level",
                            Value = 3.6f
                        },
                        new
                        {
                            Type = 2u,
                            Subtype = 43u,
                            Property = 41u,
                            ModType = (ushort)1,
                            Note = "Item - Shield - Shield Capacity per Eff. Level",
                            Value = 225f
                        },
                        new
                        {
                            Type = 2u,
                            Subtype = 1u,
                            Property = 42u,
                            ModType = (ushort)1,
                            Note = "Item - Chest - Armor per Eff. Level",
                            Value = 25f
                        },
                        new
                        {
                            Type = 2u,
                            Subtype = 2u,
                            Property = 42u,
                            ModType = (ushort)1,
                            Note = "Item - Legs - Armor per Eff. Level",
                            Value = 25f
                        },
                        new
                        {
                            Type = 2u,
                            Subtype = 3u,
                            Property = 42u,
                            ModType = (ushort)1,
                            Note = "Item - Head - Armor per Eff. Level",
                            Value = 15f
                        },
                        new
                        {
                            Type = 2u,
                            Subtype = 4u,
                            Property = 42u,
                            ModType = (ushort)1,
                            Note = "Item - Shoulder - Armor per Eff. Level",
                            Value = 20f
                        },
                        new
                        {
                            Type = 2u,
                            Subtype = 5u,
                            Property = 42u,
                            ModType = (ushort)1,
                            Note = "Item - Feet - Armor per Eff. Level",
                            Value = 15f
                        },
                        new
                        {
                            Type = 2u,
                            Subtype = 6u,
                            Property = 42u,
                            ModType = (ushort)1,
                            Note = "Item - Hands - Armor per Eff. Level",
                            Value = 15f
                        },
                        new
                        {
                            Type = 2u,
                            Subtype = 43u,
                            Property = 175u,
                            ModType = (ushort)0,
                            Note = "Item - Shield - Base Shield Mitigation Percent",
                            Value = 0.625f
                        },
                        new
                        {
                            Type = 2u,
                            Subtype = 43u,
                            Property = 176u,
                            ModType = (ushort)0,
                            Note = "Item - Shield - Base Shield Regen Percent",
                            Value = 0.15f
                        },
                        new
                        {
                            Type = 2u,
                            Subtype = 43u,
                            Property = 178u,
                            ModType = (ushort)0,
                            Note = "Item - Shield - Base Shield Reboot Rate (ms)",
                            Value = 5130f
                        });
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.ResidenceDecor", b =>
                {
                    b.Property<ulong>("Id")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValue(0ul)
                        .HasColumnName("id");

                    b.Property<ulong>("DecorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValue(0ul)
                        .HasColumnName("decorId");

                    b.Property<ushort>("ColourShiftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(5) unsigned")
                        .HasDefaultValue((ushort)0)
                        .HasColumnName("colourShiftId");

                    b.Property<uint>("DecorInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("decorInfoId");

                    b.Property<ulong>("DecorParentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValue(0ul)
                        .HasColumnName("decorParentId");

                    b.Property<uint>("DecorType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(0u)
                        .HasColumnName("decorType");

                    b.Property<uint>("PlotIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValue(2147483647u)
                        .HasColumnName("plotIndex");

                    b.Property<float>("Qw")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0f)
                        .HasColumnName("qw");

                    b.Property<float>("Qx")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0f)
                        .HasColumnName("qx");

                    b.Property<float>("Qy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0f)
                        .HasColumnName("qy");

                    b.Property<float>("Qz")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0f)
                        .HasColumnName("qz");

                    b.Property<float>("Scale")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0f)
                        .HasColumnName("scale");

                    b.Property<float>("X")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0f)
                        .HasColumnName("x");

                    b.Property<float>("Y")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0f)
                        .HasColumnName("y");

                    b.Property<float>("Z")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0f)
                        .HasColumnName("z");

                    b.HasKey("Id", "DecorId")
                        .HasName("PRIMARY");

                    b.ToTable("residence_decor");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.ResidenceModel", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValue(0ul)
                        .HasColumnName("id");

                    b.Property<ushort>("DoorDecorInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(5) unsigned")
                        .HasDefaultValue((ushort)0)
                        .HasColumnName("doorDecorInfoId");

                    b.Property<ushort>("EntrywayDecorInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(5) unsigned")
                        .HasDefaultValue((ushort)0)
                        .HasColumnName("entrywayDecorInfoId");

                    b.Property<ushort>("Flags")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(5) unsigned")
                        .HasDefaultValue((ushort)0)
                        .HasColumnName("flags");

                    b.Property<byte>("GardenSharing")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("gardenSharing");

                    b.Property<ushort>("GroundWallpaperId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(5) unsigned")
                        .HasDefaultValue((ushort)0)
                        .HasColumnName("groundWallpaperId");

                    b.Property<ulong?>("GuildOwnerId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("guildOwnerId");

                    b.Property<ushort>("MusicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(5) unsigned")
                        .HasDefaultValue((ushort)0)
                        .HasColumnName("musicId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("")
                        .HasColumnName("name");

                    b.Property<ulong?>("OwnerId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("ownerId");

                    b.Property<byte>("PrivacyLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("privacyLevel");

                    b.Property<byte>("PropertyInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("propertyInfoId");

                    b.Property<byte>("ResourceSharing")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("resourceSharing");

                    b.Property<ushort>("RoofDecorInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(5) unsigned")
                        .HasDefaultValue((ushort)0)
                        .HasColumnName("roofDecorInfoId");

                    b.Property<ushort>("SkyWallpaperId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(5) unsigned")
                        .HasDefaultValue((ushort)0)
                        .HasColumnName("skyWallpaperId");

                    b.Property<ushort>("WallpaperId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(5) unsigned")
                        .HasDefaultValue((ushort)0)
                        .HasColumnName("wallpaperId");

                    b.HasKey("Id");

                    b.HasIndex("GuildOwnerId");

                    b.HasIndex("OwnerId")
                        .IsUnique()
                        .HasDatabaseName("ownerId");

                    b.ToTable("residence");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.ResidencePlotModel", b =>
                {
                    b.Property<ulong>("Id")
                        .HasColumnType("bigint(20) unsigned")
                        .HasDefaultValue(0ul)
                        .HasColumnName("id");

                    b.Property<byte>("Index")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("index");

                    b.Property<byte>("BuildState")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("buildState");

                    b.Property<ushort>("PlotInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(5) unsigned")
                        .HasDefaultValue((ushort)0)
                        .HasColumnName("plotInfoId");

                    b.Property<byte>("PlugFacing")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("plugFacing");

                    b.Property<ushort>("PlugItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(5) unsigned")
                        .HasDefaultValue((ushort)0)
                        .HasColumnName("plugItemId");

                    b.HasKey("Id", "Index")
                        .HasName("PRIMARY");

                    b.ToTable("residence_plot");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.CharacterAchievementModel", b =>
                {
                    b.HasOne("NexusForever.Database.Character.Model.CharacterModel", "Character")
                        .WithMany("Achievement")
                        .HasForeignKey("Id")
                        .HasConstraintName("FK__character_achievement_id__character_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.CharacterActionSetAmpModel", b =>
                {
                    b.HasOne("NexusForever.Database.Character.Model.CharacterModel", "Character")
                        .WithMany("ActionSetAmp")
                        .HasForeignKey("Id")
                        .HasConstraintName("FK__character_action_set_amp_id__character_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.CharacterActionSetShortcutModel", b =>
                {
                    b.HasOne("NexusForever.Database.Character.Model.CharacterModel", "Character")
                        .WithMany("ActionSetShortcut")
                        .HasForeignKey("Id")
                        .HasConstraintName("FK__character_action_set_shortcut_id__character_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.CharacterAppearanceModel", b =>
                {
                    b.HasOne("NexusForever.Database.Character.Model.CharacterModel", "Character")
                        .WithMany("Appearance")
                        .HasForeignKey("Id")
                        .HasConstraintName("FK__character_appearance_id__character_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.CharacterBoneModel", b =>
                {
                    b.HasOne("NexusForever.Database.Character.Model.CharacterModel", "Character")
                        .WithMany("Bone")
                        .HasForeignKey("Id")
                        .HasConstraintName("FK_character_bone_id__character_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.CharacterContactModel", b =>
                {
                    b.HasOne("NexusForever.Database.Character.Model.CharacterModel", "Character")
                        .WithMany("Contact")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("FK__character_contact_id__character_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.CharacterCostumeItemModel", b =>
                {
                    b.HasOne("NexusForever.Database.Character.Model.CharacterCostumeModel", "Costume")
                        .WithMany("CostumeItem")
                        .HasForeignKey("Id", "Index")
                        .HasConstraintName("FK__character_costume_item_id-index__character_costume_id-index")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Costume");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.CharacterCostumeModel", b =>
                {
                    b.HasOne("NexusForever.Database.Character.Model.CharacterModel", "Character")
                        .WithMany("Costume")
                        .HasForeignKey("Id")
                        .HasConstraintName("FK__character_costume_id__character_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.CharacterCurrencyModel", b =>
                {
                    b.HasOne("NexusForever.Database.Character.Model.CharacterModel", "Character")
                        .WithMany("Currency")
                        .HasForeignKey("Id")
                        .HasConstraintName("FK_character_currency_id__character_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.CharacterCustomisationModel", b =>
                {
                    b.HasOne("NexusForever.Database.Character.Model.CharacterModel", "Character")
                        .WithMany("Customisation")
                        .HasForeignKey("Id")
                        .HasConstraintName("FK__character_customisation_id__character_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.CharacterDatacubeModel", b =>
                {
                    b.HasOne("NexusForever.Database.Character.Model.CharacterModel", "Character")
                        .WithMany("Datacube")
                        .HasForeignKey("Id")
                        .HasConstraintName("FK__character_datacube_id__character_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.CharacterEntitlementModel", b =>
                {
                    b.HasOne("NexusForever.Database.Character.Model.CharacterModel", "Character")
                        .WithMany("Entitlement")
                        .HasForeignKey("Id")
                        .HasConstraintName("FK__character_entitlement_id__character_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.CharacterKeybindingModel", b =>
                {
                    b.HasOne("NexusForever.Database.Character.Model.CharacterModel", "Character")
                        .WithMany("Keybinding")
                        .HasForeignKey("Id")
                        .HasConstraintName("FK__character_keybinding_id__character_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.CharacterMailAttachmentModel", b =>
                {
                    b.HasOne("NexusForever.Database.Character.Model.CharacterMailModel", "Mail")
                        .WithMany("Attachment")
                        .HasForeignKey("Id")
                        .HasConstraintName("FK__character_mail_attachment_id__character_mail_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NexusForever.Database.Character.Model.ItemModel", "Item")
                        .WithOne("MailAttachment")
                        .HasForeignKey("NexusForever.Database.Character.Model.CharacterMailAttachmentModel", "ItemGuid")
                        .HasConstraintName("FK__character_mail_attachment_itemGuid__item_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Mail");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.CharacterMailModel", b =>
                {
                    b.HasOne("NexusForever.Database.Character.Model.CharacterModel", "Recipient")
                        .WithMany("Mail")
                        .HasForeignKey("RecipientId")
                        .HasConstraintName("FK__character_mail_recipientId__character_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipient");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.CharacterPathModel", b =>
                {
                    b.HasOne("NexusForever.Database.Character.Model.CharacterModel", "Character")
                        .WithMany("Path")
                        .HasForeignKey("Id")
                        .HasConstraintName("FK__character_path_id__character_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.CharacterPetCustomisationModel", b =>
                {
                    b.HasOne("NexusForever.Database.Character.Model.CharacterModel", "Character")
                        .WithMany("PetCustomisation")
                        .HasForeignKey("Id")
                        .HasConstraintName("FK__character_pet_customisation_id__character_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.CharacterPetFlairModel", b =>
                {
                    b.HasOne("NexusForever.Database.Character.Model.CharacterModel", "Character")
                        .WithMany("PetFlair")
                        .HasForeignKey("Id")
                        .HasConstraintName("FK__character_pet_flair_id__character_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.CharacterQuestModel", b =>
                {
                    b.HasOne("NexusForever.Database.Character.Model.CharacterModel", "Character")
                        .WithMany("Quest")
                        .HasForeignKey("Id")
                        .HasConstraintName("FK__character_quest_id__character_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.CharacterQuestObjectiveModel", b =>
                {
                    b.HasOne("NexusForever.Database.Character.Model.CharacterQuestModel", "Quest")
                        .WithMany("QuestObjective")
                        .HasForeignKey("Id", "QuestId")
                        .HasConstraintName("FK__character_quest_objective_id__character_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quest");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.CharacterReputation", b =>
                {
                    b.HasOne("NexusForever.Database.Character.Model.CharacterModel", "Character")
                        .WithMany("Reputation")
                        .HasForeignKey("Id")
                        .HasConstraintName("FK__character_reputation_id__character_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.CharacterRewardTrackMilestoneModel", b =>
                {
                    b.HasOne("NexusForever.Database.Character.Model.CharacterRewardTrackModel", "RewardTrack")
                        .WithMany("Milestone")
                        .HasForeignKey("Id", "RewardTrackId")
                        .HasConstraintName("FK__character_reward_track_milestone_id-rewardTrackId__character_reward_track_id-rewardTrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RewardTrack");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.CharacterRewardTrackModel", b =>
                {
                    b.HasOne("NexusForever.Database.Character.Model.CharacterModel", "Character")
                        .WithMany("RewardTrack")
                        .HasForeignKey("Id")
                        .HasConstraintName("FK__character_reward_track_id__character_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.CharacterSpellModel", b =>
                {
                    b.HasOne("NexusForever.Database.Character.Model.CharacterModel", "Character")
                        .WithMany("Spell")
                        .HasForeignKey("Id")
                        .HasConstraintName("FK__character_spell_id__character_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.CharacterStatModel", b =>
                {
                    b.HasOne("NexusForever.Database.Character.Model.CharacterModel", "Character")
                        .WithMany("Stat")
                        .HasForeignKey("Id")
                        .HasConstraintName("FK__character_stats_stat_id_character_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.CharacterTitleModel", b =>
                {
                    b.HasOne("NexusForever.Database.Character.Model.CharacterModel", "Character")
                        .WithMany("CharacterTitle")
                        .HasForeignKey("Id")
                        .HasConstraintName("FK__character_title_id__character_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.CharacterTradeskillMaterialModel", b =>
                {
                    b.HasOne("NexusForever.Database.Character.Model.CharacterModel", "Character")
                        .WithMany("TradeskillMaterials")
                        .HasForeignKey("Id")
                        .HasConstraintName("FK__character_tradeskill_material_id__character_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.CharacterZonemapHexgroupModel", b =>
                {
                    b.HasOne("NexusForever.Database.Character.Model.CharacterModel", "Character")
                        .WithMany("ZonemapHexgroup")
                        .HasForeignKey("Id")
                        .HasConstraintName("FK__character_zonemap_hexgroup_id__character_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.ChatChannelMemberModel", b =>
                {
                    b.HasOne("NexusForever.Database.Character.Model.ChatChannelModel", "Channel")
                        .WithMany("Members")
                        .HasForeignKey("Id")
                        .HasConstraintName("FK__chat_channel_member_id__chat_channel_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.GuildAchievementModel", b =>
                {
                    b.HasOne("NexusForever.Database.Character.Model.GuildModel", "Guild")
                        .WithMany("Achievement")
                        .HasForeignKey("Id")
                        .HasConstraintName("FK__guild_achievement_id__guild_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.GuildDataModel", b =>
                {
                    b.HasOne("NexusForever.Database.Character.Model.GuildModel", "Guild")
                        .WithOne("GuildData")
                        .HasForeignKey("NexusForever.Database.Character.Model.GuildDataModel", "Id")
                        .HasConstraintName("FK__guild_guild_data_id__guild_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.GuildMemberModel", b =>
                {
                    b.HasOne("NexusForever.Database.Character.Model.GuildModel", "Guild")
                        .WithMany("GuildMember")
                        .HasForeignKey("Id")
                        .HasConstraintName("FK__guild_member_id__guild_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.GuildRankModel", b =>
                {
                    b.HasOne("NexusForever.Database.Character.Model.GuildModel", "Guild")
                        .WithMany("GuildRank")
                        .HasForeignKey("Id")
                        .HasConstraintName("FK__guild_rank_id__guild_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.ItemModel", b =>
                {
                    b.HasOne("NexusForever.Database.Character.Model.CharacterModel", "Character")
                        .WithMany("Item")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("FK__item_ownerId__character_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Character");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.ResidenceDecor", b =>
                {
                    b.HasOne("NexusForever.Database.Character.Model.ResidenceModel", "Residence")
                        .WithMany("Decor")
                        .HasForeignKey("Id")
                        .HasConstraintName("FK__residence_decor_id__residence_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Residence");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.ResidenceModel", b =>
                {
                    b.HasOne("NexusForever.Database.Character.Model.GuildModel", "Guild")
                        .WithMany("Residence")
                        .HasForeignKey("GuildOwnerId")
                        .HasConstraintName("FK__residence_guildOwnerId__guild_id");

                    b.HasOne("NexusForever.Database.Character.Model.CharacterModel", "Character")
                        .WithOne("Residence")
                        .HasForeignKey("NexusForever.Database.Character.Model.ResidenceModel", "OwnerId")
                        .HasConstraintName("FK__residence_ownerId__character_id");

                    b.Navigation("Character");

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.ResidencePlotModel", b =>
                {
                    b.HasOne("NexusForever.Database.Character.Model.ResidenceModel", "Residence")
                        .WithMany("Plot")
                        .HasForeignKey("Id")
                        .HasConstraintName("FK__residence_plot_id__residence_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Residence");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.CharacterCostumeModel", b =>
                {
                    b.Navigation("CostumeItem");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.CharacterMailModel", b =>
                {
                    b.Navigation("Attachment");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.CharacterModel", b =>
                {
                    b.Navigation("Achievement");

                    b.Navigation("ActionSetAmp");

                    b.Navigation("ActionSetShortcut");

                    b.Navigation("Appearance");

                    b.Navigation("Bone");

                    b.Navigation("CharacterTitle");

                    b.Navigation("Contact");

                    b.Navigation("Costume");

                    b.Navigation("Currency");

                    b.Navigation("Customisation");

                    b.Navigation("Datacube");

                    b.Navigation("Entitlement");

                    b.Navigation("Item");

                    b.Navigation("Keybinding");

                    b.Navigation("Mail");

                    b.Navigation("Path");

                    b.Navigation("PetCustomisation");

                    b.Navigation("PetFlair");

                    b.Navigation("Quest");

                    b.Navigation("Reputation");

                    b.Navigation("Residence");

                    b.Navigation("RewardTrack");

                    b.Navigation("Spell");

                    b.Navigation("Stat");

                    b.Navigation("TradeskillMaterials");

                    b.Navigation("ZonemapHexgroup");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.CharacterQuestModel", b =>
                {
                    b.Navigation("QuestObjective");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.CharacterRewardTrackModel", b =>
                {
                    b.Navigation("Milestone");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.ChatChannelModel", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.GuildModel", b =>
                {
                    b.Navigation("Achievement");

                    b.Navigation("GuildData");

                    b.Navigation("GuildMember");

                    b.Navigation("GuildRank");

                    b.Navigation("Residence");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.ItemModel", b =>
                {
                    b.Navigation("MailAttachment");
                });

            modelBuilder.Entity("NexusForever.Database.Character.Model.ResidenceModel", b =>
                {
                    b.Navigation("Decor");

                    b.Navigation("Plot");
                });
#pragma warning restore 612, 618
        }
    }
}
